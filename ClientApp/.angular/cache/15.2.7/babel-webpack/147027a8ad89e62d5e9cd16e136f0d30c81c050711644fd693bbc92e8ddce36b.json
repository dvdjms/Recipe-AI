{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet FetchChatDataComponent = class FetchChatDataComponent {\n  onChange() {\n    this.http.get('./db/generic_food').subscribe(result => {\n      console.log(result);\n      this.food = result;\n    });\n  }\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.food = [];\n    this.APIResponse = [];\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n};\nFetchChatDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-ChatGPT-data.component.html'\n}), __param(1, Inject('BASE_URL'))], FetchChatDataComponent);\nexport { FetchChatDataComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAS1C,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAGjCC,QAAQ;IACN,IAAI,CAACC,IAAI,CAACC,GAAG,CAAM,mBAAmB,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;MACzDC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,IAAI,CAACG,IAAI,GAAGH,MAAM;IAEpB,CAAC,CAAC;EAEJ;EAgBAI,YAAoBP,IAAgB,EAAsBQ,OAAe;IAArD,SAAI,GAAJR,IAAI;IAxBjB,SAAI,GAAG,EAAE;IAoBT,gBAAW,GAAwB,EAAE;IAErC,eAAU,GAAG,EAAE;IAGpBA,IAAI,CAACC,GAAG,CAAsBO,OAAO,GAAG,aAAa,CAAC,CAACN,SAAS,CAACC,MAAM,IAAG;MACxE,IAAI,CAACM,WAAW,GAAGN,MAAM;IAC3B,CAAC,EAAEO,KAAK,IAAIN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAGAC,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC;KAC7B;;IACDT,OAAO,CAACC,GAAG,CAACO,cAAc,CAACC,UAAU,CAAC;IAEtC,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,qCAAqC,EAAEF,cAAc,CAAC,CAACV,SAAS,CAACa,QAAQ,IAAG;MAChGX,OAAO,CAACC,GAAG,CAACU,QAAQ,CAACC,MAAM,CAAC;MAC5B,IAAI,CAACP,WAAW,GAAGM,QAAQ,CAACC,MAAM;IAClC,CAAC,EAAEN,KAAK,IAAIN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;CACD;AA5CYZ,sBAAsB,eALlCF,SAAS,CAAC;EACTqB,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE;CACd,CAAC,EA4BuCC,iBAAM,CAAC,UAAU,CAAC,IA1B9CrB,sBAAsB,CA4ClC;SA5CYA,sBAAsB","names":["Component","Inject","FetchChatDataComponent","onChange","http","get","subscribe","result","console","log","food","constructor","baseUrl","APIResponse","error","onSubmit","requestPayload","SearchText","post","response","answer","selector","templateUrl","__param"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html'\r\n})\r\n\r\nexport class FetchChatDataComponent {\r\n\r\n  public food = [];\r\n  onChange() {\r\n    this.http.get<any>('./db/generic_food').subscribe(result => {\r\n      console.log(result)\r\n      this.food = result\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n\r\n  public SearchText = '';\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}