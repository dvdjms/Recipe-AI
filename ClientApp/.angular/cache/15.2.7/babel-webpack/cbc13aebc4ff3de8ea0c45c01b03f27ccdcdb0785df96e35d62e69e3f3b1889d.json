{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FetchChatDataComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatResponse(ctx_r0.APIResponse), i0.ɵɵsanitizeHtml);\n  }\n}\n// import { FoodService } from './food.service';\nexport class FetchChatDataComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.APIResponse = '';\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse += result;\n    }, error => console.error(error));\n  }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n  formatResponse(response) {\n    return response.replace(/\\n/g, '<br>');\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-ChatGPT-data\"]],\n  decls: 14,\n  vars: 2,\n  consts: [[3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"id\", \"output\"], [4, \"ngIf\"], [3, \"innerHTML\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"br\")(1, \"br\")(2, \"br\");\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"h5\");\n      i0.ɵɵtext(5, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 2);\n      i0.ɵɵtext(8, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(9, \"br\");\n      i0.ɵɵelementStart(10, \"h6\");\n      i0.ɵɵtext(11, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 3);\n      i0.ɵɵtemplate(13, FetchChatDataComponent_div_13_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.APIResponse);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n}\\n\\n#output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    font-size: 12px;\\n    height: auto;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n    margin-bottom: 50px\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmV0Y2gtQ2hhdEdQVC1kYXRhL2ZldGNoLUNoYXRHUFQtZGF0YS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksU0FBUztBQUNiOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixZQUFZO0lBQ1osV0FBVztJQUNYLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEI7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbImg2IHtcbiAgICBjb2xvcjpyZWQ7XG59XG5cbiNvdXRwdXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGF6dXJlO1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyLWNvbG9yOiBibHVlO1xuICAgIGJvcmRlci1zdHlsZTogZG91YmxlO1xuICAgIG1hcmdpbi1ib3R0b206IDUwcHhcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;IAkBEA,2BAAyB;IACvBA,yBAAqD;IACvDA,iBAAM;;;;IADCA,eAAyC;IAAzCA,wFAAyC;;;ACjBlD;AAUA,OAAM,MAAOC,sBAAsB;EAKjCC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IAHjB,gBAAW,GAAW,EAAE;IACxB,eAAU,GAAG,EAAE;IAGpBA,IAAI,CAACE,GAAG,CAAsBD,OAAO,GAAG,aAAa,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MACxE,IAAI,CAACC,WAAW,IAAID,MAAM;IAC5B,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAGAE,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC;KAC7B;;IACDH,OAAO,CAACI,GAAG,CAACF,cAAc,CAACC,UAAU,CAAC;IAEtC,IAAI,CAACV,IAAI,CAACY,IAAI,CAAM,qCAAqC,EAAEH,cAAc,CAAC,CAACN,SAAS,CAACU,QAAQ,IAAG;MAChGN,OAAO,CAACI,GAAG,CAACE,QAAQ,CAACC,MAAM,CAAC;MAC5B,IAAI,CAACT,WAAW,GAAGQ,QAAQ,CAACC,MAAM;IAClC,CAAC,EAAER,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEOS,cAAc,CAACF,QAAgB;IACpC,OAAOA,QAAQ,CAACG,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;EACxC;;AA1BWlB,sBAAsB;mBAAtBA,sBAAsB,4DAKa,UAAU;AAAA;AAL7CA,sBAAsB;QAAtBA,sBAAsB;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVnCxB,qBAAI;MAOJA,+BAA4B;MAAtBA;QAAA,OAAUyB,cAAU;MAAA,EAAC;MACzBzB,0BAAI;MAAAA,kCAAkB;MAAAA,iBAAK;MAC3BA,gCAAmD;MAA5CA;QAAA;MAAA,EAAwB;MAA/BA,iBAAmD;MACnDA,iCAAsB;MAAAA,6BAAa;MAAAA,iBAAS;MAE9CA,qBAAI;MACJA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAEfA,+BAAiB;MACfA,yEAEM;MACRA,iBAAM;;;MAVGA,eAAwB;MAAxBA,wCAAwB;MAOzBA,eAAiB;MAAjBA,sCAAiB","names":["i0","FetchChatDataComponent","constructor","http","baseUrl","get","subscribe","result","APIResponse","error","console","onSubmit","requestPayload","SearchText","log","post","response","answer","formatResponse","replace","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["\r\n\r\n<br>\r\n<br>\r\n<!-- <p *ngIf=\"!APIResponse?.length\"><em>Loading...</em></p> -->\r\n<!-- <my-child></my-child> -->\r\n\r\n<br>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n<div id=\"output\">\r\n  <div *ngIf=\"APIResponse\">\r\n    <div [innerHTML]=\"formatResponse(APIResponse)\"></div>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n// import { FoodService } from './food.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-ChatGPT-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  styleUrls: ['./fetch-ChatGPT-data.component.css'],\r\n})\r\n\r\n\r\nexport class FetchChatDataComponent {\r\n\r\n  public APIResponse: string = '';\r\n  public SearchText = '';\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse += result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public formatResponse(response: string): string {\r\n    return response.replace(/\\n/g, '<br>');\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}