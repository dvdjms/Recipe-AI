{"ast":null,"code":"import { FoodService } from './food.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./food.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction FetchChatDataComponent_mat_optgroup_7_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r4);\n  }\n}\nfunction FetchChatDataComponent_mat_optgroup_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 10);\n    i0.ɵɵtemplate(1, FetchChatDataComponent_mat_optgroup_7_mat_option_1_Template, 2, 2, \"mat-option\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const section_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"label\", section_r2.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", section_r2.options);\n  }\n}\nexport class FetchChatDataComponent {\n  constructor(http, baseUrl, foodService) {\n    this.http = http;\n    this.foodService = foodService;\n    this.foodData = [];\n    this.APIResponse = [];\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n  ngOnInit() {\n    this.getData();\n  }\n  getData() {\n    this.foodService.getInfo().subscribe(data => {\n      const rows = data.split('\\n');\n      const firstColumn = rows.slice(1).map(row => row.split(',')[0].trim()).filter(value => value !== '');\n      console.log(firstColumn);\n    });\n  }\n  onChange() {\n    this.SearchText = '';\n  }\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\n  //     this.APIResponse = result;\n  //   }, error => console.error(error));\n  // }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'), i0.ɵɵdirectiveInject(i2.FoodService));\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  features: [i0.ɵɵProvidersFeature([FoodService])],\n  decls: 28,\n  vars: 5,\n  consts: [[\"id\", \"tableLabel\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Search\", 3, \"matAutocomplete\", \"ngModel\", \"ngModelChange\", \"input\"], [\"auto\", \"matAutocomplete\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Search Food\", 3, \"submit\"], [\"type\", \"submit\"], [3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"output\"], [\"id\", \"response\"], [3, \"label\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"ChatGPT\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵelementStart(3, \"mat-form-field\")(4, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.searchTerm = $event;\n      })(\"input\", function FetchChatDataComponent_Template_input_input_4_listener() {\n        return ctx.filterOptions();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 2);\n      i0.ɵɵtemplate(7, FetchChatDataComponent_mat_optgroup_7_Template, 2, 2, \"mat-optgroup\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"form\")(9, \"input\", 4);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_input_submit_9_listener() {\n        return ctx.onChange;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵtext(11, \"Submit\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(12, \"br\")(13, \"br\")(14, \"br\");\n      i0.ɵɵelementStart(15, \"form\", 6);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_15_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(16, \"h5\");\n      i0.ɵɵtext(17, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 5);\n      i0.ɵɵtext(20, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementStart(22, \"h6\");\n      i0.ɵɵtext(23, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 8)(25, \"div\", 8)(26, \"p\", 9);\n      i0.ɵɵtext(27);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0)(\"ngModel\", ctx.searchTerm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.filteredOptions);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.APIResponse);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n  }\\n  #output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    height: 50px;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n  }\"]\n});","map":{"version":3,"mappings":"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","names":["FoodService","i0","FetchChatDataComponent","constructor","http","baseUrl","foodService","get","subscribe","result","APIResponse","error","console","ngOnInit","getData","getInfo","data","rows","split","firstColumn","slice","map","row","trim","filter","value","log","onChange","SearchText","onSubmit","requestPayload","post","response","answer","selectors","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FoodService } from './food.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  providers: [FoodService]\r\n})\r\n\r\n\r\nexport class FetchChatDataComponent implements OnInit{\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string, private foodService:FoodService) {\r\n      http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  foodData: any[] = [];\r\n\r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    this.foodService.getInfo().subscribe(data => {\r\n      const rows = data.split('\\n');\r\n      const firstColumn = rows.slice(1)\r\n        .map(row => row.split(',')[0].trim())\r\n        .filter(value => value !== '');\r\n  \r\n      console.log(firstColumn);\r\n    });\r\n  }\r\n  onChange() {\r\n      this.SearchText= '';\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n\r\n  public SearchText = '';\r\n\r\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n  //     this.APIResponse = result;\r\n  //   }, error => console.error(error));\r\n  // }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n","<h1 id=\"tableLabel\">ChatGPT</h1>\r\n\r\n<br>\r\n\r\n<!-- <p *ngIf=\"!APIResponse?.length\"><em>Loading...</em></p> -->\r\n\r\n<mat-form-field>\r\n  <input type=\"text\" matInput [matAutocomplete]=\"auto\" [(ngModel)]=\"searchTerm\" (input)=\"filterOptions()\" placeholder=\"Search\">\r\n  <mat-autocomplete #auto=\"matAutocomplete\">\r\n    <mat-optgroup *ngFor=\"let section of filteredOptions\" [label]=\"section.name\">\r\n      <mat-option *ngFor=\"let option of section.options\" [value]=\"option\">{{ option }}</mat-option>\r\n    </mat-optgroup>\r\n  </mat-autocomplete>\r\n</mat-form-field>\r\n\r\n\r\n\r\n<form>\r\n  <input (submit)=\"onChange\" placeholder=\"Search Food\" >\r\n  <button type=\"submit\">Submit</button>\r\n</form>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n<div id=\"output\">\r\n<div id=\"output\" >\r\n  <p id=\"response\">{{ APIResponse }}</p>\r\n</div>\r\n</div>\r\n\r\n<style>\r\n  h6 {\r\n    color:red;\r\n  }\r\n  #output {\r\n    background-color: azure;\r\n    height: 50px;\r\n    width: 100%;\r\n    border-color: blue;\r\n    border-style: double;\r\n  }\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}