{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { FoodService } from './food.service';\nlet FetchChatDataComponent = class FetchChatDataComponent {\n  constructor(http, baseUrl, foodService) {\n    this.http = http;\n    this.foodService = foodService;\n    this.foodData = [];\n    this.APIResponse = [];\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n  ngOnInit() {\n    this.getData();\n  }\n  getData() {\n    this.foodService.getInfo().subscribe(data => {\n      const rows = data.split('\\n');\n      const firstColumn = rows.slice(1).map(row => row.split(',')[0].trim()).filter(value => value !== '');\n      console.log(firstColumn);\n    });\n  }\n  onChange() {\n    this.SearchText = '';\n  }\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\n  //     this.APIResponse = result;\n  //   }, error => console.error(error));\n  // }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n};\nFetchChatDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-ChatGPT-data.component.html',\n  templateUrl: './food-dropdown.component.html',\n  providers: [FoodService]\n}), __param(1, Inject('BASE_URL'))], FetchChatDataComponent);\nexport { FetchChatDataComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAgB,eAAe;AAEzD,SAASC,WAAW,QAAQ,gBAAgB;AAUrC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAE/BC,YAAoBC,IAAgB,EAAsBC,OAAe,EAAUC,WAAuB;IAAtF,SAAI,GAAJF,IAAI;IAA2D,gBAAW,GAAXE,WAAW;IAMhG,aAAQ,GAAU,EAAE;IA0Bb,gBAAW,GAAwB,EAAE;IAErC,eAAU,GAAG,EAAE;IAjClBF,IAAI,CAACG,GAAG,CAAsBF,OAAO,GAAG,aAAa,CAAC,CAACG,SAAS,CAACC,MAAM,IAAG;MAC1E,IAAI,CAACC,WAAW,GAAGD,MAAM;IAC3B,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAIAE,QAAQ;IACN,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAA,OAAO;IACL,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE,CAACP,SAAS,CAACQ,IAAI,IAAG;MAC1C,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;MAC7B,MAAMC,WAAW,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAC9BC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC,CACpCC,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAK,EAAE,CAAC;MAEhCb,OAAO,CAACc,GAAG,CAACP,WAAW,CAAC;IAC1B,CAAC,CAAC;EACJ;EACAQ,QAAQ;IACJ,IAAI,CAACC,UAAU,GAAE,EAAE;EAErB;EAWF;EACA;EACA;EACA;EACA;EAGAC,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBF,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC;KAC7B;;IACDhB,OAAO,CAACc,GAAG,CAACI,cAAc,CAACF,UAAU,CAAC;IAEtC,IAAI,CAACxB,IAAI,CAAC2B,IAAI,CAAM,qCAAqC,EAAED,cAAc,CAAC,CAACtB,SAAS,CAACwB,QAAQ,IAAG;MAChGpB,OAAO,CAACc,GAAG,CAACM,QAAQ,CAACC,MAAM,CAAC;MAC5B,IAAI,CAACvB,WAAW,GAAGsB,QAAQ,CAACC,MAAM;IAClC,CAAC,EAAEtB,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;CACD;AAxDYT,sBAAsB,eARlCH,SAAS,CAAC;EACTmC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,qCAAqC;EAClDA,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAACnC,WAAW;CACxB,CAAC,EAKyCoC,iBAAM,CAAC,UAAU,CAAC,IAFhDnC,sBAAsB,CAwDlC;SAxDYA,sBAAsB","names":["Component","Inject","FoodService","FetchChatDataComponent","constructor","http","baseUrl","foodService","get","subscribe","result","APIResponse","error","console","ngOnInit","getData","getInfo","data","rows","split","firstColumn","slice","map","row","trim","filter","value","log","onChange","SearchText","onSubmit","requestPayload","post","response","answer","selector","templateUrl","providers","__param"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FoodService } from './food.service';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  templateUrl: './food-dropdown.component.html',\r\n  providers: [FoodService]\r\n})\r\n\r\n\r\nexport class FetchChatDataComponent implements OnInit{\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string, private foodService:FoodService) {\r\n      http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  foodData: any[] = [];\r\n\r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    this.foodService.getInfo().subscribe(data => {\r\n      const rows = data.split('\\n');\r\n      const firstColumn = rows.slice(1)\r\n        .map(row => row.split(',')[0].trim())\r\n        .filter(value => value !== '');\r\n  \r\n      console.log(firstColumn);\r\n    });\r\n  }\r\n  onChange() {\r\n      this.SearchText= '';\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n\r\n  public SearchText = '';\r\n\r\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n  //     this.APIResponse = result;\r\n  //   }, error => console.error(error));\r\n  // }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}