{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FetchChatDataComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatResponse(ctx_r0.APIResponse), i0.ɵɵsanitizeHtml);\n  }\n}\nexport class FetchChatDataComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.APIResponse = '';\n    this.SearchText = '';\n    this.bodyText = 'This text can be updated in modal 1';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse += result;\n    }, error => console.error(error));\n  }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText\n    };\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n  formatResponse(response) {\n    return response.replace(/\\n/g, '<br>');\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-ChatGPT-data\"]],\n  decls: 16,\n  vars: 2,\n  consts: [[3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"id\", \"output\"], [4, \"ngIf\"], [\"id\", \"footer\"], [3, \"innerHTML\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"br\")(1, \"br\");\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"h5\");\n      i0.ɵɵtext(4, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵtext(7, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"br\");\n      i0.ɵɵelementStart(9, \"h6\");\n      i0.ɵɵtext(10, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"button\");\n      i0.ɵɵtext(13, \"Display modal\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, FetchChatDataComponent_div_14_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"footer\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.APIResponse);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n}\\n\\n#output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    font-size: 12px;\\n    height: auto;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n}\\n\\n#footer[_ngcontent-%COMP%] {\\n      height: 100px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmV0Y2gtQ2hhdEdQVC1kYXRhL2ZldGNoLUNoYXRHUFQtZGF0YS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUE7SUFDSSxTQUFTO0FBQ2I7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLFlBQVk7SUFDWixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLG9CQUFvQjtBQUN4Qjs7QUFFQTtNQUNNLGFBQWE7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaDYge1xuICAgIGNvbG9yOnJlZDtcbn1cblxuI291dHB1dCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGhlaWdodDogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItY29sb3I6IGJsdWU7XG4gICAgYm9yZGVyLXN0eWxlOiBkb3VibGU7XG59XG5cbiNmb290ZXIge1xuICAgICAgaGVpZ2h0OiAxMDBweDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;IAaEA,2BAAyB;IACvBA,yBAAqD;IACvDA,iBAAM;;;;IADCA,eAAyC;IAAzCA,wFAAyC;;;ACFlD,OAAM,MAAOC,sBAAsB;EAKjCC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IAHjB,gBAAW,GAAW,EAAE;IACxB,eAAU,GAAG,EAAE;IAQtB,aAAQ,GAAG,qCAAqC;IAL9CA,IAAI,CAACE,GAAG,CAAsBD,OAAO,GAAG,aAAa,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MACxE,IAAI,CAACC,WAAW,IAAID,MAAM;IAC5B,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EAEnC;EAIAE,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA;KAClB;IACDH,OAAO,CAACI,GAAG,CAACF,cAAc,CAACC,UAAU,CAAC;IAEtC,IAAI,CAACV,IAAI,CAACY,IAAI,CAAM,qCAAqC,EAAEH,cAAc,CAAC,CAACN,SAAS,CAACU,QAAQ,IAAG;MAChGN,OAAO,CAACI,GAAG,CAACE,QAAQ,CAACC,MAAM,CAAC;MAC5B,IAAI,CAACT,WAAW,GAAGQ,QAAQ,CAACC,MAAM;IAClC,CAAC,EAAER,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEOS,cAAc,CAACF,QAAgB;IACpC,OAAOA,QAAQ,CAACG,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;EACxC;;AA5BWlB,sBAAsB;mBAAtBA,sBAAsB,4DAKa,UAAU;AAAA;AAL7CA,sBAAsB;QAAtBA,sBAAsB;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDZnCxB,qBAAI;MAGJA,+BAA4B;MAAtBA;QAAA,OAAUyB,cAAU;MAAA,EAAC;MACzBzB,0BAAI;MAAAA,kCAAkB;MAAAA,iBAAK;MAC3BA,gCAAmD;MAA5CA;QAAA;MAAA,EAAwB;MAA/BA,iBAAmD;MACnDA,iCAAsB;MAAAA,6BAAa;MAAAA,iBAAS;MAE9CA,qBAAI;MACJA,0BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAEfA,+BAAiB;MACPA,8BAAa;MAAAA,iBAAS;MAC9BA,yEAEM;MAERA,iBAAM;MACNA,6BAA6B;;;MAbpBA,eAAwB;MAAxBA,wCAAwB;MAQzBA,eAAiB;MAAjBA,sCAAiB","names":["i0","FetchChatDataComponent","constructor","http","baseUrl","get","subscribe","result","APIResponse","error","console","onSubmit","requestPayload","SearchText","log","post","response","answer","formatResponse","replace","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["<br>\r\n<br>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n<div id=\"output\">\r\n  <button>Display modal</button>\r\n  <div *ngIf=\"APIResponse\">\r\n    <div [innerHTML]=\"formatResponse(APIResponse)\"></div>\r\n  </div>\r\n  \r\n</div>\r\n<footer id=\"footer\"></footer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {onSubmitIngredients} from './food'\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-ChatGPT-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  styleUrls: ['./fetch-ChatGPT-data.component.css'],\r\n})\r\n\r\n\r\nexport class FetchChatDataComponent {\r\n\r\n  public APIResponse: string = '';\r\n  public SearchText = '';\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse += result;\r\n    }, error => console.error(error));\r\n\r\n  }\r\n  bodyText = 'This text can be updated in modal 1';\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public formatResponse(response: string): string {\r\n    return response.replace(/\\n/g, '<br>');\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}