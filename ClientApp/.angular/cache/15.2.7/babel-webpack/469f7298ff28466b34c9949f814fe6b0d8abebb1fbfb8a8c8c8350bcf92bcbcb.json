{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction FetchChatDataComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class FetchChatDataComponent {\n  constructor() {\n    this.APIResponse = [];\n    this.SearchText = '';\n  }\n  // public ChatResponse = '';\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\n  //     this.APIResponse = result;\n  //   }, error => console.error(error));\n  // }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)();\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"id\", \"output\"], [\"id\", \"response\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"ChatGPT\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵtemplate(3, FetchChatDataComponent_p_3_Template, 3, 0, \"p\", 1);\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"h5\");\n      i0.ɵɵtext(6, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵtext(9, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"h6\");\n      i0.ɵɵtext(12, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 5)(14, \"div\", 5)(15, \"p\", 6);\n      i0.ɵɵtext(16);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.APIResponse == null ? null : ctx.APIResponse.length));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.APIResponse);\n    }\n  },\n  dependencies: [i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n  }\\n  #output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    height: 50px;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n  }\"]\n});","map":{"version":3,"mappings":";;;;;IAIAA,yBAAgC;IAAIA,0BAAU;IAAAA,iBAAK;;;ACKnD,OAAM,MAAOC,sBAAsB;EALnCC;IAOS,gBAAW,GAAwB,EAAE;IAErC,eAAU,GAAG,EAAE;;EACtB;EAEA;EACA;EACA;EAEA;EACA;EAGAC,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC;KAC7B;;IACDC,OAAO,CAACC,GAAG,CAACH,cAAc,CAACC,UAAU,CAAC;IAEtC,IAAI,CAACG,IAAI,CAACC,IAAI,CAAsB,qCAAqC,EAAEL,cAAc,CAAC,CAACM,SAAS,CAACC,MAAM,IAAG;MAC5G,IAAI,CAACC,WAAW,GAAGD,MAAM;IAC3B,CAAC,EAAEE,KAAK,IAAIP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC,CAAC;EAEnC;;AAzBWZ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDTnClB,6BAAoB;MAAAA,uBAAO;MAAAA,iBAAK;MAEhCA,qBAAI;MAEJA,mEAAuD;MAEvDA,+BAA4B;MAAtBA;QAAA,OAAUmB,cAAU;MAAA,EAAC;MACzBnB,0BAAI;MAAAA,kCAAkB;MAAAA,iBAAK;MAC3BA,gCAAmD;MAA5CA;QAAA;MAAA,EAAwB;MAA/BA,iBAAmD;MACnDA,iCAAsB;MAAAA,6BAAa;MAAAA,iBAAS;MAE9CA,sBAAI;MACJA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAEfA,+BAAiB;MAGEA,aAAiB;MAAAA,iBAAI;;;MAbpCA,eAA0B;MAA1BA,iFAA0B;MAIrBA,eAAwB;MAAxBA,wCAAwB;MASdA,eAAiB;MAAjBA,qCAAiB","names":["i0","FetchChatDataComponent","constructor","onSubmit","requestPayload","SearchText","console","log","http","post","subscribe","result","APIResponse","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">ChatGPT</h1>\r\n\r\n<br>\r\n\r\n<p *ngIf=\"!APIResponse?.length\"><em>Loading...</em></p>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n<div id=\"output\">\r\n<!-- <div id=\"output\" *ngFor=\"let response of APIResponse\"> -->\r\n<div id=\"output\" >\r\n  <p id=\"response\">{{ APIResponse }}</p>\r\n  <!-- <p id=\"response\">{{ response.response }}</p> -->\r\n\r\n</div>\r\n</div>\r\n\r\n<style>\r\n  h6 {\r\n    color:red;\r\n  }\r\n  #output {\r\n    background-color: azure;\r\n    height: 50px;\r\n    width: 100%;\r\n    border-color: blue;\r\n    border-style: double;\r\n  }\r\n</style>\r\n\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html'\r\n})\r\n\r\nexport class FetchChatDataComponent {\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n\r\n  public SearchText = '';\r\n  // public ChatResponse = '';\r\n\r\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n  //     this.APIResponse = result;\r\n\r\n  //   }, error => console.error(error));\r\n  // }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<ChatGPTRequestDTO[]>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n\r\n  }\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}