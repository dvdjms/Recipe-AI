{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { FoodService } from './food.service';\nlet FetchChatDataComponent = class FetchChatDataComponent {\n  constructor(http, baseUrl, foodService) {\n    this.http = http;\n    this.foodService = foodService;\n    this.foodData = [];\n    // onChange() {\n    //   this.http.get<any>('./db/generic_food').subscribe(result => {\n    //     console.log(result)\n    //     this.food = result\n    //   })\n    // genericFood = ('./db/generic_food.csv');\n    this.APIResponse = [];\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n  ngOnInit() {\n    this.getData();\n  }\n  getData() {\n    this.foodService.getInfo().subscribe(data => {\n      const list = data.split('\\n');\n      list.forEach(e => {\n        console.log(this.foodData);\n        this.foodData.push(e);\n      });\n    });\n  }\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\n  //     this.APIResponse = result;\n  //   }, error => console.error(error));\n  // }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n};\nFetchChatDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-ChatGPT-data.component.html',\n  providers: [FoodService]\n}), __param(1, Inject('BASE_URL'))], FetchChatDataComponent);\nexport { FetchChatDataComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAA0B,eAAe;AAEnE,SAASC,WAAW,QAAQ,gBAAgB;AAYrC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAE/BC,YAAoBC,IAAgB,EAAsBC,OAAe,EAAUC,WAAuB;IAAtF,SAAI,GAAJF,IAAI;IAA2D,gBAAW,GAAXE,WAAW;IAMhG,aAAQ,GAAU,EAAE;IAiBpB;IACA;IACA;IACA;IAEA;IAEA;IAKO,gBAAW,GAAwB,EAAE;IAErC,eAAU,GAAG,EAAE;IApClBF,IAAI,CAACG,GAAG,CAAsBF,OAAO,GAAG,aAAa,CAAC,CAACG,SAAS,CAACC,MAAM,IAAG;MAC1E,IAAI,CAACC,WAAW,GAAGD,MAAM;IAC3B,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAIAE,QAAQ;IACN,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAA,OAAO;IACL,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE,CAACP,SAAS,CAACQ,IAAI,IAAG;MAC1C,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;MAC7BD,IAAI,CAACE,OAAO,CAAEC,CAAC,IAAG;QAChBR,OAAO,CAACS,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC;QAC1B,IAAI,CAACA,QAAQ,CAACC,IAAI,CAACH,CAAC,CAAC;MACvB,CAAC,CAAC;IAEJ,CAAC,CAAC;EAEJ;EAiBA;EACA;EACA;EACA;EACA;EAGAI,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC;KAC7B;;IACDd,OAAO,CAACS,GAAG,CAACI,cAAc,CAACC,UAAU,CAAC;IAEtC,IAAI,CAACtB,IAAI,CAACuB,IAAI,CAAM,qCAAqC,EAAEF,cAAc,CAAC,CAACjB,SAAS,CAACoB,QAAQ,IAAG;MAChGhB,OAAO,CAACS,GAAG,CAACO,QAAQ,CAACC,MAAM,CAAC;MAC5B,IAAI,CAACnB,WAAW,GAAGkB,QAAQ,CAACC,MAAM;IAClC,CAAC,EAAElB,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;CACD;AA3DYT,sBAAsB,eATlCH,SAAS,CAAC;EACT+B,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC/B,WAAW;CACxB,CAAC,EAOyCgC,iBAAM,CAAC,UAAU,CAAC,IAFhD/B,sBAAsB,CA2DlC;SA3DYA,sBAAsB","names":["Component","Inject","FoodService","FetchChatDataComponent","constructor","http","baseUrl","foodService","get","subscribe","result","APIResponse","error","console","ngOnInit","getData","getInfo","data","list","split","forEach","e","log","foodData","push","onSubmit","requestPayload","SearchText","post","response","answer","selector","templateUrl","providers","__param"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["import { Component, Inject, OnInit, NgModule } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FoodService } from './food.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  providers: [FoodService]\r\n})\r\n\r\n\r\n\r\n\r\nexport class FetchChatDataComponent implements OnInit{\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string, private foodService:FoodService) {\r\n      http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  foodData: any[] = [];\r\n\r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    this.foodService.getInfo().subscribe(data => {\r\n      const list = data.split('\\n');\r\n      list.forEach( e => {\r\n        console.log(this.foodData)\r\n        this.foodData.push(e)\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n  // onChange() {\r\n  //   this.http.get<any>('./db/generic_food').subscribe(result => {\r\n  //     console.log(result)\r\n  //     this.food = result\r\n\r\n  //   })\r\n\r\n  // genericFood = ('./db/generic_food.csv');\r\n\r\n\r\n\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n\r\n  public SearchText = '';\r\n\r\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n  //     this.APIResponse = result;\r\n  //   }, error => console.error(error));\r\n  // }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}