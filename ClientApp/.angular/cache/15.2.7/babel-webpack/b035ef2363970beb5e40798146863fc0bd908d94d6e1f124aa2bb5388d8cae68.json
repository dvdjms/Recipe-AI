{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./food\";\nimport * as i3 from \"@angular/forms\";\nexport class FetchChatDataComponent {\n  constructor(http, baseUrl, FoodService) {\n    this.http = http;\n    this.FoodService = FoodService;\n    this.foodData = [];\n    // onChange() {\n    //   this.http.get<any>('./db/generic_food').subscribe(result => {\n    //     console.log(result)\n    //     this.food = result\n    //   })\n    // genericFood = ('./db/generic_food.csv');\n    this.APIResponse = [];\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n  // constructor(private food: Food) { }\n  // \n  ngOnInit() {\n    this.getData();\n  }\n  getData() {\n    this.FoodService.getInfo().subscribe(data => {\n      const list = data.split('\\n');\n      list.forEach(e => {\n        console.log(this.foodData);\n        this.foodData.push(e);\n      });\n    });\n  }\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\n  //     this.APIResponse = result;\n  //   }, error => console.error(error));\n  // }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'), i0.ɵɵdirectiveInject(i2.FoodService));\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 22,\n  vars: 2,\n  consts: [[\"id\", \"tableLabel\"], [\"type\", \"submit\"], [3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"output\"], [\"id\", \"response\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"ChatGPT\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵelementStart(3, \"form\")(4, \"button\", 1);\n      i0.ɵɵtext(5, \"Submit\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(6, \"br\")(7, \"br\")(8, \"br\");\n      i0.ɵɵelementStart(9, \"form\", 2);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_9_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(10, \"h5\");\n      i0.ɵɵtext(11, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 1);\n      i0.ɵɵtext(14, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"h6\");\n      i0.ɵɵtext(17, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 4)(19, \"div\", 4)(20, \"p\", 5);\n      i0.ɵɵtext(21);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.APIResponse);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n  }\\n  #output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    height: 50px;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n  }\"]\n});","map":{"version":3,"mappings":";;;;AAUA,OAAM,MAAOA,sBAAsB;EAE/BC,YAAoBC,IAAgB,EAAsBC,OAAe,EAAUC,WAAuB;IAAtF,SAAI,GAAJF,IAAI;IAA2D,gBAAW,GAAXE,WAAW;IAMhG,aAAQ,GAAU,EAAE;IAmBpB;IACA;IACA;IACA;IAEA;IAEA;IAYO,gBAAW,GAAwB,EAAE;IAErC,eAAU,GAAG,EAAE;IA7ClBF,IAAI,CAACG,GAAG,CAAsBF,OAAO,GAAG,aAAa,CAAC,CAACG,SAAS,CAACC,MAAM,IAAG;MAC1E,IAAI,CAACC,WAAW,GAAGD,MAAM;IAC3B,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAIA;EACF;EACEE,QAAQ;IACN,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAA,OAAO;IACL,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE,CAACP,SAAS,CAACQ,IAAI,IAAG;MAC1C,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;MAC7BD,IAAI,CAACE,OAAO,CAAEC,CAAC,IAAG;QAChBR,OAAO,CAACS,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC;QAC1B,IAAI,CAACA,QAAQ,CAACC,IAAI,CAACH,CAAC,CAAC;MACvB,CAAC,CAAC;IAEJ,CAAC,CAAC;EAEJ;EAwBA;EACA;EACA;EACA;EACA;EAGAI,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC;KAC7B;;IACDd,OAAO,CAACS,GAAG,CAACI,cAAc,CAACC,UAAU,CAAC;IAEtC,IAAI,CAACtB,IAAI,CAACuB,IAAI,CAAM,qCAAqC,EAAEF,cAAc,CAAC,CAACjB,SAAS,CAACoB,QAAQ,IAAG;MAChGhB,OAAO,CAACS,GAAG,CAACO,QAAQ,CAACC,MAAM,CAAC;MAC5B,IAAI,CAACnB,WAAW,GAAGkB,QAAQ,CAACC,MAAM;IAClC,CAAC,EAAElB,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;;AAnEWT,sBAAsB;mBAAtBA,sBAAsB,4DAEe,UAAU;AAAA;AAF/CA,sBAAsB;QAAtBA,sBAAsB;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVnCC,6BAAoB;MAAAA,uBAAO;MAAAA,iBAAK;MAEhCA,qBAAI;MAGJA,4BAAM;MAEmBA,sBAAM;MAAAA,iBAAS;MAExCA,qBAAI;MAIJA,+BAA4B;MAAtBA;QAAA,OAAUC,cAAU;MAAA,EAAC;MACzBD,2BAAI;MAAAA,mCAAkB;MAAAA,iBAAK;MAC3BA,iCAAmD;MAA5CA;QAAA;MAAA,EAAwB;MAA/BA,iBAAmD;MACnDA,kCAAsB;MAAAA,8BAAa;MAAAA,iBAAS;MAE9CA,sBAAI;MACJA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAEfA,+BAAiB;MAEEA,aAAiB;MAAAA,iBAAI;;;MAR/BA,gBAAwB;MAAxBA,wCAAwB;MAQdA,eAAiB;MAAjBA,qCAAiB","names":["FetchChatDataComponent","constructor","http","baseUrl","FoodService","get","subscribe","result","APIResponse","error","console","ngOnInit","getData","getInfo","data","list","split","forEach","e","log","foodData","push","onSubmit","requestPayload","SearchText","post","response","answer","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FoodService } from './food';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html'\r\n})\r\n\r\nexport class FetchChatDataComponent implements OnInit{\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string, private FoodService:FoodService) {\r\n      http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  foodData: any[] = [];\r\n\r\n  // constructor(private food: Food) { }\r\n// \r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    this.FoodService.getInfo().subscribe(data => {\r\n      const list = data.split('\\n');\r\n      list.forEach( e => {\r\n        console.log(this.foodData)\r\n        this.foodData.push(e)\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n  // onChange() {\r\n  //   this.http.get<any>('./db/generic_food').subscribe(result => {\r\n  //     console.log(result)\r\n  //     this.food = result\r\n\r\n  //   })\r\n\r\n  // genericFood = ('./db/generic_food.csv');\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n\r\n  public SearchText = '';\r\n\r\n  // constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n  //   http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n  //     this.APIResponse = result;\r\n  //   }, error => console.error(error));\r\n  // }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n","<h1 id=\"tableLabel\">ChatGPT</h1>\r\n\r\n<br>\r\n\r\n<!-- <p *ngIf=\"!APIResponse?.length\"><em>Loading...</em></p> -->\r\n<form>\r\n  <!-- <input (submit)=\"onChange\" placeholder=\"{{food}}\"> -->\r\n  <button type=\"submit\" >Submit</button>\r\n</form>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n<div id=\"output\">\r\n<div id=\"output\" >\r\n  <p id=\"response\">{{ APIResponse }}</p>\r\n</div>\r\n</div>\r\n\r\n<style>\r\n  h6 {\r\n    color:red;\r\n  }\r\n  #output {\r\n    background-color: azure;\r\n    height: 50px;\r\n    width: 100%;\r\n    border-color: blue;\r\n    border-style: double;\r\n  }\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}