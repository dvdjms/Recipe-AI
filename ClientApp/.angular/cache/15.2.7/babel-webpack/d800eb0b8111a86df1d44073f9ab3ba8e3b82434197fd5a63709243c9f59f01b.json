{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FetchChatDataComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchChatDataComponent_table_10_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const response_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(response_r3.response);\n  }\n}\nfunction FetchChatDataComponent_table_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 6)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Response\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(5, FetchChatDataComponent_table_10_div_5_Template, 3, 1, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.APIResponse);\n  }\n}\nexport class FetchChatDataComponent {\n  constructor(http, baseUrl) {\n    this.APIResponse = [];\n    this.SearchText = '';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse = result;\n      console.log('this', result);\n    }, error => console.error(error));\n  }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    this.http.post('https://localhost:44417/api/ChatGPT', requestPayload).subscribe(result => {\n      this.APIResponse = result;\n    }, error => console.error(error));\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 11,\n  vars: 3,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"ChatGPTt\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵtemplate(3, FetchChatDataComponent_p_3_Template, 3, 0, \"p\", 1);\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"h5\");\n      i0.ɵɵtext(6, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.ingredients = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵtext(9, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, FetchChatDataComponent_table_10_Template, 6, 1, \"table\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.APIResponse == null ? null : ctx.APIResponse.length));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.ingredients);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.APIResponse.length);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;IAIAA,yBAAgC;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAgB/CA,2BAA0C;IACrCA,YAAuB;IAAAA,iBAAI;;;;IAA3BA,eAAuB;IAAvBA,0CAAuB;;;;;IAThCA,gCAA2F;IAGjFA,wBAAQ;IAAAA,iBAAK;IAKnBA,gFAGM;IAEVA,iBAAQ;;;;IALsBA,eAAc;IAAdA,4CAAc;;;ACZ5C,OAAM,MAAOC,sBAAsB;EAKjCC,YAAYC,IAAgB,EAAsBC,OAAe;IAH1D,gBAAW,GAAwB,EAAE;IACrC,eAAU,GAAG,EAAE;IAGpBD,IAAI,CAACE,GAAG,CAAsBD,OAAO,GAAG,aAAa,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MACxE,IAAI,CAACC,WAAW,GAAGD,MAAM;MACzBE,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEH,MAAM,CAAC;IAC7B,CAAC,EAAEI,KAAK,IAAIF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAGAC,QAAQ;IACN,MAAMC,cAAc,GAAG;MACrBC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAE;KAC9B;;IAED,IAAI,CAACX,IAAI,CAACY,IAAI,CAAsB,qCAAqC,EAAEF,cAAc,CAAC,CAACP,SAAS,CAACC,MAAM,IAAG;MAC5G,IAAI,CAACC,WAAW,GAAGD,MAAM;IAC3B,CAAC,EAAEI,KAAK,IAAIF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;;AArBWV,sBAAsB;mBAAtBA,sBAAsB,4DAKK,UAAU;AAAA;AALrCA,sBAAsB;QAAtBA,sBAAsB;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRnCpB,6BAAoB;MAAAA,wBAAQ;MAAAA,iBAAK;MAEjCA,qBAAI;MAEJA,mEAAuD;MAEvDA,+BAA4B;MAAtBA;QAAA,OAAUqB,cAAU;MAAA,EAAC;MACzBrB,0BAAI;MAAAA,kCAAkB;MAAAA,iBAAK;MAC3BA,gCAAoD;MAA7CA;QAAA;MAAA,EAAyB;MAAhCA,iBAAoD;MACpDA,iCAAsB;MAAAA,6BAAa;MAAAA,iBAAS;MAG9CA,6EAaQ;;;MArBJA,eAA0B;MAA1BA,iFAA0B;MAIrBA,eAAyB;MAAzBA,yCAAyB;MAI+BA,eAAwB;MAAxBA,6CAAwB","names":["i0","FetchChatDataComponent","constructor","http","baseUrl","get","subscribe","result","APIResponse","console","log","error","onSubmit","requestPayload","SearchText","post","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">ChatGPTt</h1>\r\n\r\n<br>\r\n\r\n<p *ngIf=\"!APIResponse?.length\"><em>Loading...</em></p>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"ingredients\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"APIResponse.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>Response</th>\r\n\r\n    </tr>\r\n  </thead>\r\n\r\n    <div *ngFor=\"let response of APIResponse\">\r\n      <p>{{ response.response }}</p>\r\n\r\n    </div>\r\n\r\n</table>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html'\r\n})\r\nexport class FetchChatDataComponent {\r\n\r\n  public APIResponse: ChatGPTRequestDTO[] = [];\r\n  public SearchText = '';\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse = result;\r\n      console.log('this', result)\r\n    }, error => console.error(error));\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText  // Include user input in the request\r\n    };\r\n\r\n    this.http.post<ChatGPTRequestDTO[]>('https://localhost:44417/api/ChatGPT', requestPayload).subscribe(result => {\r\n      this.APIResponse = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}