{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../modal/modal.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction FetchChatDataComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatResponse(ctx_r0.APIResponse), i0.ɵɵsanitizeHtml);\n  }\n}\nexport class FetchChatDataComponent {\n  constructor(modalService, http, baseUrl) {\n    this.modalService = modalService;\n    this.http = http;\n    this.APIResponse = '';\n    this.SearchText = '';\n    this.bodyText = 'This text can be updated in modal 1';\n    this.displayStyle = \"none\";\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse += result;\n    }, error => console.error(error));\n  }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText // Include user input in the request\n    };\n\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n  formatResponse(response) {\n    return response.replace(/\\n/g, '<br>');\n  }\n  openPopup() {\n    this.displayStyle = \"block\";\n  }\n  closePopup() {\n    this.displayStyle = \"none\";\n  }\n}\nFetchChatDataComponent.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || FetchChatDataComponent)(i0.ɵɵdirectiveInject(i1.ModalService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchChatDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchChatDataComponent,\n  selectors: [[\"app-fetch-ChatGPT-data\"]],\n  decls: 50,\n  vars: 3,\n  consts: [[3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"id\", \"output\"], [4, \"ngIf\"], [\"id\", \"footer\"], [\"type\", \"button\", \"data-toggle\", \"modal\", \"data-target\", \"#myModal\", 1, \"btn\", \"btn-info\", \"btn-lg\"], [\"id\", \"myModal\", \"role\", \"dialog\", 1, \"modal\", \"fade\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"close\"], [1, \"modal-title\"], [1, \"modal-body\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn\", \"btn-default\"], [1, \"m-3\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [2, \"padding-bottom\", \"1500px\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [3, \"innerHTML\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"br\")(1, \"br\")(2, \"br\");\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"h5\");\n      i0.ɵɵtext(5, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 2);\n      i0.ɵɵtext(8, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(9, \"br\");\n      i0.ɵɵelementStart(10, \"h6\");\n      i0.ɵɵtext(11, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 3);\n      i0.ɵɵtemplate(13, FetchChatDataComponent_div_13_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"footer\", 5);\n      i0.ɵɵelementStart(15, \"button\", 6);\n      i0.ɵɵtext(16, \"Open Modal\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 7)(18, \"div\", 8)(19, \"div\", 9)(20, \"div\", 10)(21, \"button\", 11);\n      i0.ɵɵtext(22, \"\\u00D7\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"h4\", 12);\n      i0.ɵɵtext(24, \"Modal Header\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 13)(26, \"p\");\n      i0.ɵɵtext(27, \"Some text in the modal.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\", 14)(29, \"button\", 15);\n      i0.ɵɵtext(30, \"Close\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(31, \"div\")(32, \"div\", 16)(33, \"h1\");\n      i0.ɵɵtext(34, \"Bootstrap 5 Modal Example with Angular 15\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"p\");\n      i0.ɵɵtext(36);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function FetchChatDataComponent_Template_button_click_37_listener() {\n        return ctx.modalService.open(\"modal\");\n      });\n      i0.ɵɵtext(38, \"Open Modal 2\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(39, \"modal\")(40, \"div\", 10)(41, \"h5\", 12);\n      i0.ɵɵtext(42, \"Angular + Bootstrap Modal #2\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"button\", 18);\n      i0.ɵɵlistener(\"click\", function FetchChatDataComponent_Template_button_click_43_listener() {\n        return ctx.modalService.close();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(44, \"div\", 13)(45, \"p\", 19);\n      i0.ɵɵtext(46, \"This is a tall modal to demonstrate scrolling modal content.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(47, \"div\", 14)(48, \"button\", 20);\n      i0.ɵɵlistener(\"click\", function FetchChatDataComponent_Template_button_click_48_listener() {\n        return ctx.modalService.close();\n      });\n      i0.ɵɵtext(49, \"Close\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.APIResponse);\n      i0.ɵɵadvance(23);\n      i0.ɵɵtextInterpolate(ctx.bodyText);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n}\\n\\n#output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    font-size: 12px;\\n    height: auto;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n}\\n\\n#footer[_ngcontent-%COMP%] {\\n      height: 100px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmV0Y2gtQ2hhdEdQVC1kYXRhL2ZldGNoLUNoYXRHUFQtZGF0YS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUE7SUFDSSxTQUFTO0FBQ2I7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLFlBQVk7SUFDWixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLG9CQUFvQjtBQUN4Qjs7QUFFQTtNQUNNLGFBQWE7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaDYge1xuICAgIGNvbG9yOnJlZDtcbn1cblxuI291dHB1dCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGhlaWdodDogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItY29sb3I6IGJsdWU7XG4gICAgYm9yZGVyLXN0eWxlOiBkb3VibGU7XG59XG5cbiNmb290ZXIge1xuICAgICAgaGVpZ2h0OiAxMDBweDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","FetchChatDataComponent","constructor","modalService","http","baseUrl","get","subscribe","result","APIResponse","error","console","onSubmit","requestPayload","SearchText","log","post","response","answer","formatResponse","replace","openPopup","displayStyle","closePopup","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts"],"sourcesContent":["<br>\r\n<br>\r\n<!-- <p *ngIf=\"!APIResponse?.length\"><em>Loading...</em></p> -->\r\n<!-- <my-child></my-child> -->\r\n\r\n<br>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n  <div id=\"output\">\r\n    <div *ngIf=\"APIResponse\">\r\n      <div [innerHTML]=\"formatResponse(APIResponse)\"></div>\r\n    </div>\r\n    \r\n  </div>\r\n  <footer id=\"footer\"></footer>\r\n\r\n\r\n\r\n  <!-- Trigger the modal with a button -->\r\n<button type=\"button\" class=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\">Open Modal</button>\r\n\r\n<!-- Modal -->\r\n<div id=\"myModal\" class=\"modal fade\" role=\"dialog\">\r\n  <div class=\"modal-dialog\">\r\n\r\n    <!-- Modal content-->\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n        <h4 class=\"modal-title\">Modal Header</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <p>Some text in the modal.</p>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n<!-- <app-modal></app-modal> -->\r\n\r\n\r\n<!-- main app container -->\r\n<div>\r\n  <div class=\"m-3\">\r\n      <h1>Bootstrap 5 Modal Example with Angular 15</h1>\r\n      <p>{{bodyText}}</p>\r\n      <button class=\"btn btn-primary\" (click)=\"modalService.open('modal')\">Open Modal 2</button>\r\n  </div>\r\n  \r\n\r\n  \r\n  <modal>\r\n      <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">Angular + Bootstrap Modal #2</h5>\r\n          <button type=\"button\" class=\"btn-close\" (click)=\"modalService.close();\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n          <p style=\"padding-bottom: 1500px;\">This is a tall modal to demonstrate scrolling modal content.</p>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"modalService.close();\">Close</button>\r\n      </div>\r\n  </modal>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n// import { FoodService } from './food.service';\r\nimport { ModalService } from '../modal/modal.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-ChatGPT-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  styleUrls: ['./fetch-ChatGPT-data.component.css'],\r\n})\r\n\r\n\r\nexport class FetchChatDataComponent {\r\n\r\n  public APIResponse: string = '';\r\n  public SearchText = '';\r\n\r\n  constructor(protected modalService: ModalService, private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse += result;\r\n    }, error => console.error(error));\r\n\r\n  }\r\n  bodyText = 'This text can be updated in modal 1';\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText // Include user input in the request\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public formatResponse(response: string): string {\r\n    return response.replace(/\\n/g, '<br>');\r\n  }\r\n  displayStyle = \"none\";\r\n  \r\n  openPopup() {\r\n    this.displayStyle = \"block\";\r\n  }\r\n  closePopup() {\r\n    this.displayStyle = \"none\";\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}