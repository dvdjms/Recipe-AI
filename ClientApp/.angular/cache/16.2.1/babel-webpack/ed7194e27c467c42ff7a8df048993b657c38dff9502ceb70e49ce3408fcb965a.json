{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FetchChatDataComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatResponse(ctx_r0.APIResponse), i0.ɵɵsanitizeHtml);\n  }\n}\nexport class FetchChatDataComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.APIResponse = '';\n    this.SearchText = '';\n    this.bodyText = 'This text can be updated in modal 1';\n    http.get(baseUrl + 'api/chatgpt').subscribe(result => {\n      this.APIResponse += result;\n    }, error => console.error(error));\n  }\n  onSubmit() {\n    const requestPayload = {\n      SearchText: this.SearchText\n    };\n    console.log(requestPayload.SearchText);\n    this.http.post('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\n      console.log(response.answer);\n      this.APIResponse = response.answer;\n    }, error => console.error(error));\n  }\n  formatResponse(response) {\n    return response.replace(/\\n/g, '<br>');\n  }\n}\n_class = FetchChatDataComponent;\n_class.ɵfac = function FetchChatDataComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-fetch-ChatGPT-data\"]],\n  decls: 16,\n  vars: 2,\n  consts: [[3, \"submit\"], [\"name\", \"ingredients\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"id\", \"output\"], [4, \"ngIf\"], [\"id\", \"footer\"], [3, \"innerHTML\"]],\n  template: function FetchChatDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"br\")(1, \"br\");\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function FetchChatDataComponent_Template_form_submit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"h5\");\n      i0.ɵɵtext(4, \"Insert ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function FetchChatDataComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.SearchText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵtext(7, \"Search Recipe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"br\");\n      i0.ɵɵelementStart(9, \"h6\");\n      i0.ɵɵtext(10, \"Output\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"button\");\n      i0.ɵɵtext(13, \"Display modal\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, FetchChatDataComponent_div_14_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"footer\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.SearchText);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.APIResponse);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"h6[_ngcontent-%COMP%] {\\n    color:red;\\n}\\n\\n#output[_ngcontent-%COMP%] {\\n    background-color: azure;\\n    font-size: 12px;\\n    height: auto;\\n    width: 100%;\\n    border-color: blue;\\n    border-style: double;\\n}\\n\\n#footer[_ngcontent-%COMP%] {\\n      height: 100px;\\n}\\n\\nform[_ngcontent-%COMP%] {\\n    margin-top: 300px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmV0Y2gtQ2hhdEdQVC1kYXRhL2ZldGNoLUNoYXRHUFQtZGF0YS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUE7SUFDSSxTQUFTO0FBQ2I7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLFlBQVk7SUFDWixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLG9CQUFvQjtBQUN4Qjs7QUFFQTtNQUNNLGFBQWE7QUFDbkI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaDYge1xuICAgIGNvbG9yOnJlZDtcbn1cblxuI291dHB1dCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGhlaWdodDogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItY29sb3I6IGJsdWU7XG4gICAgYm9yZGVyLXN0eWxlOiBkb3VibGU7XG59XG5cbiNmb290ZXIge1xuICAgICAgaGVpZ2h0OiAxMDBweDtcbn1cblxuZm9ybSB7XG4gICAgbWFyZ2luLXRvcDogMzAwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","formatResponse","APIResponse","ɵɵsanitizeHtml","FetchChatDataComponent","constructor","http","baseUrl","SearchText","bodyText","get","subscribe","result","error","console","onSubmit","requestPayload","log","post","response","answer","replace","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","FetchChatDataComponent_Template","rf","ctx","ɵɵlistener","FetchChatDataComponent_Template_form_submit_2_listener","ɵɵtext","FetchChatDataComponent_Template_input_ngModelChange_5_listener","$event","ɵɵtemplate","FetchChatDataComponent_div_14_Template"],"sources":["/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.ts","/Users/dvdjms/Cezanne/RecipeRevel/ClientApp/src/app/fetch-ChatGPT-data/fetch-ChatGPT-data.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FoodSearchComponent } from '../food-search/food-search.component';\r\nimport {MatDialogRef} from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-ChatGPT-data',\r\n  templateUrl: './fetch-ChatGPT-data.component.html',\r\n  styleUrls: ['./fetch-ChatGPT-data.component.css'],\r\n})\r\n\r\n\r\nexport class FetchChatDataComponent {\r\n\r\n  public APIResponse: string = '';\r\n  public SearchText = '';\r\n\r\n\r\n \r\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ChatGPTRequestDTO[]>(baseUrl + 'api/chatgpt').subscribe(result => {\r\n      this.APIResponse += result;\r\n    }, error => console.error(error));\r\n\r\n  }\r\n  bodyText = 'This text can be updated in modal 1';\r\n\r\n\r\n  onSubmit() {\r\n    const requestPayload = {\r\n      SearchText: this.SearchText\r\n    };\r\n    console.log(requestPayload.SearchText)\r\n\r\n    this.http.post<any>('https://localhost:44417/api/chatgpt', requestPayload).subscribe(response => {\r\n    console.log(response.answer)\r\n    this.APIResponse = response.answer;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public formatResponse(response: string): string {\r\n    return response.replace(/\\n/g, '<br>');\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n}\r\n\r\n\r\ninterface ChatGPTRequestDTO {\r\n  response: string;\r\n}\r\n","<br>\r\n<br>\r\n\r\n<form (submit)=\"onSubmit()\">\r\n  <h5>Insert ingredients</h5>\r\n  <input [(ngModel)]=\"SearchText\" name=\"ingredients\">\r\n  <button type=\"submit\">Search Recipe</button>\r\n</form>\r\n<br>\r\n<h6>Output</h6>\r\n\r\n<div id=\"output\">\r\n  <button>Display modal</button>\r\n  <div *ngIf=\"APIResponse\">\r\n    <div [innerHTML]=\"formatResponse(APIResponse)\"></div>\r\n  </div>\r\n  \r\n</div>\r\n<footer id=\"footer\"></footer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}